version: 2
jobs:
  test:
    parallelism: 4
    # Call bash as interactive login shell to make sure nvm is loaded through .bashrc
    shell: /bin/bash -ileo pipefail
    docker:
      - image: circleci/ruby:2.3.4-jessie-browsers
        environment:
          CIRCLE_TEST_REPORTS: /tmp/circleci-test-results
          MOCHA_FILE: /tmp/circleci-test-results/mocha.xml
          DATABASE_URL: mysql2://root:very-secret@127.0.0.1/sharetribe_test
          NODE_VERSION: 7.8.0
          NODE_ENV: test
          RAILS_ENV: test
          RACK_ENV: test
          BUNDLE_PATH: vendor/bundle
          BUNDLE_JOBS: 4
          BUNDLE_RETRY: 3
      - image: mysql:5.7
        environment:
          MYSQL_ROOT_PASSWORD=very-secret
    steps:
      - checkout
      - restore_cache:
          keys:
            - bundler-cache-v2-{{ checksum "Gemfile.lock" }}
            - bundler-cache-v2-
      - restore_cache:
          keys:
            - node-cache-v3-{{ checksum "package.json" }}-{{ checksum "client/package.json" }}
            - node-cache-v3-
      - run:
          name: install system deps
          command: script/ci-install-deps.sh
      - run:
          name: bundle install
          command: bundle check || bundle install --without=development
      - run:
          name: npm install
          command: npm install
      - save_cache:
          key: bundler-cache-v2-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
            - ~/.bundle
      - save_cache:
          key: node-cache-v3-{{ checksum "package.json" }}-{{ checksum "client/package.json" }}
          paths:
            - ~/.nvm
            - ~/.bashrc
            - client/node_modules
            - ./node_modules
      - run:
          name: prepare
          command: script/ci-prepare.sh
      - run:
          name: rubocop
          command: if [[ "$CIRCLE_NODE_INDEX" == "0" ]] ; then bundle exec rubocop -R ; fi
      - run:
          name: npm lint
          command: if [[ "$CIRCLE_NODE_INDEX" == "0" ]] ; then npm run lint ; fi
          working_directory: client
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:3306 -timeout 1m
      - run:
          name: db setup
          command: bundle exec rake db:create db:structure:load ts:configure ts:index ts:start --trace
      - run:
          name: rspec
          command: bundle exec rspec --format progress --format RspecJunitFormatter --out $CIRCLE_TEST_REPORTS/rspec.xml $(circleci tests glob spec/**/*_spec.rb | circleci tests split --split-by=timings)
      - run:
          name: cucumber
          command: bundle exec cucumber -p ci --format junit --out $CIRCLE_TEST_REPORTS/cucumber/junit.xml $(circleci tests glob features/**/*.feature | circleci tests split --split-by=timings)
          environment:
            PHANTOMJS: true
      - run:
          name: npm test
          command: if [[ "$CIRCLE_NODE_INDEX" == "0" ]] ; then npm test ; fi
          working_directory: client
      - store_test_results:
          path: /tmp/circleci-test-results
      - store_artifacts:
          path: /tmp/circleci-test-results
    #Build Docker appp
  build:
    docker:
      - image:  circleci/ruby:2.3.4-jessie-browsers  
        environment:
          CIRCLE_TEST_REPORTS: /tmp/circleci-test-results
          MOCHA_FILE: /tmp/circleci-test-results/mocha.xml
          DATABASE_URL: mysql2://root:very-secret@127.0.0.1/sharetribe_test
          NODE_VERSION: 7.8.0
          NODE_ENV: test
          RAILS_ENV: test
          RACK_ENV: test
          BUNDLE_PATH: vendor/bundle
          BUNDLE_JOBS: 4
          BUNDLE_RETRY: 3
    steps:
      - checkout 
      - run:
          name: Setup common environment variables
          command: |
            echo 'export ECR_REPOSITORY_NAME="${AWS_RESOURCE_NAME_PREFIX}"' >> $BASH_ENV
            echo 'export FULL_IMAGE_NAME="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${ECR_REPOSITORY_NAME}:${CIRCLE_SHA1}"' >> $BASH_ENV
      - run:
          name: Build image
          command: |
            docker build -t $FULL_IMAGE_NAME .
      - run:
          name: Test image
          command: |
            docker run -d -p 8080:8080 --name built-image $FULL_IMAGE_NAME
            sleep 10
            docker run --network container:built-image appropriate/curl --retry 10 --retry-connrefused http://localhost:8080 | grep "Hello World!"
      - run:
          name: Save image to an archive
          command: |
            mkdir docker-image
            docker save -o docker-image/image.tar $FULL_IMAGE_NAME
      - persist_to_workspace:
          root: .
          paths:
            - docker-image
  # Depploy Docker image
  deploy:  
    docker:
      - image: circleci/python:3.6.1
    environment:
      AWS_DEFAULT_OUTPUT: json
      AWS_RESOURCE_NAME_PREFIX: holexc
      AWS_DEFAULT_REGION: eu-west-1
      AWS_ACCOUNT_ID: 512492595221 

    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: workspace
      - restore_cache:
          key: v1-{{ checksum "requirements.txt" }}
      - run:
          name: Install awscli
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt
      - save_cache:
          key: v1-{{ checksum "requirements.txt" }}
          paths:
            - "venv"
      - run:
          name: Load image
          command: |
            docker load --input workspace/docker-image/image.tar
      - run:
          name: Setup common environment variables
          command: |
            echo 'export ECR_REPOSITORY_NAME="${AWS_RESOURCE_NAME_PREFIX}"' >> $BASH_ENV
            echo 'export ECS_CLUSTER_NAME="${AWS_RESOURCE_NAME_PREFIX}-cluster"' >> $BASH_ENV
            echo 'export ECS_SERVICE_NAME="${AWS_RESOURCE_NAME_PREFIX}-service"' >> $BASH_ENV
      - run:
          name: Push image
          command: |
            . venv/bin/activate
            eval $(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)
            docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$ECR_REPOSITORY_NAME:$CIRCLE_SHA1
      - run:
          name: Deploy
          command: |
            . venv/bin/activate
            export ECS_TASK_FAMILY_NAME="${AWS_RESOURCE_NAME_PREFIX}-service"
            export ECS_CONTAINER_DEFINITION_NAME="${AWS_RESOURCE_NAME_PREFIX}-service"
            export EXECUTION_ROLE_ARN="arn:aws:iam::$AWS_ACCOUNT_ID:role/${AWS_RESOURCE_NAME_PREFIX}-ecs-execution-role"
            ./deploy.sh
      - run:
          name: Test deployment (Please manually tear down AWS resources after use, if desired)
          command: |
            . venv/bin/activate
            TARGET_GROUP_ARN=$(aws ecs describe-services --cluster $ECS_CLUSTER_NAME --services $ECS_SERVICE_NAME | jq -r '.services[0].loadBalancers[0].targetGroupArn')
            ELB_ARN=$(aws elbv2 describe-target-groups --target-group-arns $TARGET_GROUP_ARN | jq -r '.TargetGroups[0].LoadBalancerArns[0]')
            ELB_DNS_NAME=$(aws elbv2 describe-load-balancers --load-balancer-arns $ELB_ARN | jq -r '.LoadBalancers[0].DNSName')
            curl http://$ELB_DNS_NAME | grep "Hello World!"
workflows:
  version: 2
  test:
    jobs:
      - test
  build:
    jobs:
      - build
  deploy:
    jobs:
      - deploy 

